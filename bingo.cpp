#include <iostream>   // F√∂r in och utmatning (cin, cout)
#include <algorithm>  // F√∂r algoritmer som sort, find, swap
#include <random>     // F√∂r slumptalsgenerering
#include <cstdlib>    // F√∂r systemfunktioner (rand, srand)
#include <ctime>      // F√∂r tidshantering (time)

using namespace std;

const int SIZE = 4; // F√∂r en 4x4 spelplan

void clearScreen() {
    cout << "\033[2J\033[1;1H"; // Rensar sk√§rmen
}

void shuffleNumbers(int numbers[], int size) {
    srand(time(0)); // Initiera slumpgeneratorn med aktuell tid

    // Fyll arrayen med siffror fr√•n 1 till size
    for (int i = 0; i < size; i++) {
        numbers[i] = i + 1;
    }

    // Blanda siffrorna
    for (int i = size - 1; i > 0; i--) {
        int j = rand() % (i + 1); // Random index mellan 0 och i
        swap(numbers[i], numbers[j]); // Byt plats p√• siffrorna
    }
}


// Funktion f√∂r att skriva ut spelbr√§det
void printBoard(int board[SIZE][SIZE], bool revealed[SIZE][SIZE], char letterMap[SIZE][SIZE]) {
    clearScreen();  // Rensa sk√§rmen
    const string GREEN = "\033[32m";  // Definiera f√§rgen gr√∂n f√∂r nummer som anv√§ndare har anv√§nt
    const string RESET = "\033[0m";  // √Öterst√§ll till standardf√§rg

    cout << "\nSpelbr√§de:" << endl;  // Skriv ut rubriken f√∂r spelbr√§det
    for (int i = 0; i < SIZE; i++) {  // Loopa genom rader
        for (int j = 0; j < SIZE; j++) {  // Loopa genom kolumner
            if (revealed[i][j]) {  // Om rutan √§r avsl√∂jad
                cout << GREEN << board[i][j] << RESET << "\t";  // Skriv ut numret i gr√∂nt
            } else {
                cout << letterMap[i][j] << "\t";  // Skriv ut bokstaven om rutan inte √§r avsl√∂jad
            }
        }
        cout << endl;  // Ny rad efter varje rad p√• br√§det
    }
}


bool checkBingo(bool revealed[SIZE][SIZE]) {
    // Kontrollera varje rad
    for (int i = 0; i < SIZE; i++) {
        // Kontrollera om alla rutor i raden √§r markerade
        bool rowBingo = true;
        for (int j = 0; j < SIZE; j++) {
            if (!revealed[i][j]) { // Om en ruta inte √§r markerad
                rowBingo = false;  // Det finns inget bingo p√• denna rad
                break;             // Avbryt kontrollen av raden
            }
        }
        if (rowBingo) return true; // Om hela raden √§r markerad, returnera true (bingo)

        // Kontrollera varje kolumn
        bool colBingo = true;
        for (int j = 0; j < SIZE; j++) {
            if (!revealed[j][i]) { // Om en ruta i kolumnen inte √§r markerad
                colBingo = false;  // Det finns inget bingo p√• denna kolumn
                break;
            }
        }
        if (colBingo) return true; // Om hela kolumnen √§r markerad, returnera true (bingo)
    }

    // Kontrollera diagonaler
    bool diag1 = true; // F√∂rsta diagonalen (fr√•n v√§nster till h√∂ger)
    bool diag2 = true; // Andra diagonalen (fr√•n h√∂ger till v√§nster)

    for (int i = 0; i < SIZE; i++) {
        // Kontrollera den f√∂rsta diagonalen: [0][0], [1][1], [2][2], [3][3]
        if (!revealed[i][i]) {
            diag1 = false; // Om en ruta p√• diagonalen inte √§r markerad
        }

        // Kontrollera den andra diagonalen: [0][3], [1][2], [2][1], [3][0]
        if (!revealed[i][SIZE - 1 - i]) {
            diag2 = false; // Om en ruta p√• den andra diagonalen inte √§r markerad
        }
    }

    // Returnera true om n√•gon av diagonalerna √§r helt markerad
    return diag1 || diag2;
}

int main() {
    ios::sync_with_stdio(false); //St√§nger av koppling mellan cin/cout f√∂r att √∂ka hastigheten
    cin.tie(nullptr);  // Kopplar bort cin fr√•n cout f√∂r att cin och cout ska inte vara tom aoutamtisk

    int board[SIZE][SIZE]; //Spelbr√§det, varje ruta har ett numer
    bool revealed[SIZE][SIZE] = {}; //
    char letterMap[SIZE][SIZE]; //Spelets katra, varje ruta har en bokstav
    char letter = 'A'; 
    int numbers[16]; // Lagras alla nummer som sedan ska slumpass
    shuffleNumbers(numbers, 16);

    int index = 0;

    // Loopa genom varje rad och kolumn i spelbr√§det
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            board[i][j] = numbers[index++]; // Tilldela ett slumpat nummer till spelbr√§det
            letterMap[i][j] = letter++; // Tilldela en bokstav (A-P) till letterMap
        }
    }

    int chosenNumbers[16]; // En array f√∂r att lagra de valda numren (max 16 nummer).
    int numChosen = 0;  // Sparar hur m√•nga attemps spelaren har gjort
    const int maxAttempts = 9; // Max antal f√∂rs√∂k
    bool bingoAchieved = false; // Har f√•tt bingo ?


    cout << "V√§lkommen till Bingo! Du har " << maxAttempts << " chanser att f√• en rad, kolumn eller diagonal" << endl;
    cout << endl;
    cout << "Varje g√•gn ska du v√§lja ett nummer mellan 1 och 16." << endl;
    cout << endl;
    cout << "Tryck P√• Enter f√∂r att b√∂rja spela" << endl;
    cin.ignore(); // V√§nta tills spelaren trycker p√• en knapp
    
    for (int attempt = 1; attempt <= maxAttempts; attempt++) {
        printBoard(board, revealed, letterMap);
        int choice;

        while (true) {
            cin >> choice;

            if (cin.fail()) {  // Om misslyckas
                cin.clear(); // Rensa cin
                cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Rensa bort all ogiltig inmatning fram till n√§sta radbrytning
                cout << "‚ùå Ogiltig inmatning! Skriv ett nummer mellan 1 och 16 ‚ùå" << endl;
                continue; // G√•r tillbaka till b√∂rjan av loppen
            }

            if (choice < 1 || choice > 16) { // Kollar om nummert √§r mellan 1 och 16
                cout << "‚ùå Ogiltigt val! Ange ett nummer mellan 1 och 16 ‚ùå" << endl;
                continue;  // G√•r tillbaka till b√∂rjan av loppen
            }

            bool alreadyChosen = false; // S√§tter att nummert inte har valts s√• l√§nge
            for (int i = 0; i < numChosen; i++) {
                if (chosenNumbers[i] == choice) { // Omm valet √§r lika med ett valt nummer
                    alreadyChosen = true; // √Ñndra till true
                    break;
                }
            }
            
            if (alreadyChosen) { // Skriva till anv√§ndaren att nummret har redan valts
                cout << "‚ö†Ô∏è Numret " << choice << " har redan anv√§nts, v√§lj ett annat nummer ‚ö†Ô∏è" << endl;
                continue;  // G√•r tillbaka till b√∂rjan av loppen
            }
            break;
        }

        chosenNumbers[numChosen++] = choice; // Lagrar vilket nummer spelaren har anv√§ndt i vilken val. 

        // Loopa varje rad p√• spelbr√§det
        for (int i = 0; i < SIZE; i++) {
            // Loopa genom varje kolumn p√• spelbr√§det
            for (int j = 0; j < SIZE; j++) {
                // Kontrollera om det valda finns i den rutan (board[i][j])
                if (board[i][j] == choice) {
                    // Om numret finns i rutan, markera rutan som vaald
                    revealed[i][j] = true;
                }
            }
        }

        if (checkBingo(revealed)) { // Kollar om spelaren har f√•tt bingo
            printBoard(board, revealed, letterMap);
            cout << "\nüéâ BINGO! Du vann p√• " << attempt << " f√∂rs√∂k!" << endl;
            bingoAchieved = true;
            break; // Sluta loppen
        }
    }

    if (!bingoAchieved) { // Om spelaren inte fick bingo
        printBoard(board, revealed, letterMap);
        cout << "\nTyv√§rr, du fick inte bingo. F√∂rs√∂k igen n√§sta g√•ng!" << endl;
    }
    
    // En Sammanfattning av spelet
    cout << "\nSammanfattning av ditt spel:" << endl;
    cout << "Valda nummer: ";
    for (int i = 0; i < numChosen; i++){
         cout << chosenNumbers[i] << " "; // Skriver ut alla valda nummer
    }
    cout << endl;

    return 0;
}
